Используется компонентный подход.
Т.е. мы разбиваем интерфейс на отдельные компоненты - независимый модуль приложения или независимый кусок кода, который можно переиспользовать в любом месте приложения неограниченное количество раз. Компонентный подход в свою очередь заключается в создании приложения, основанном на таких компонентах. Суть подхода заключается в том, что нам не нужно писать один и тот же код несколько раз, нам достаточно переиспользовать уже готовый компонент, и при изменении внутренней структуры данного куска кода нам достаточно изменить его всего в одном месте (в самом компоненте).

В нашем проекте 3 компонента:
1. Заголовок с иконкой
2. Каталог товаров
3. Корзина 

Компоненты мы создаем в JS, отображать их будем в HTML. Поэтому создаем папку Components, а в ней отдельные папки для каждого компонентся с их js и css файлами. А в HTML создаем 3 узла этих копонентов - 3 блока с id-шниками. 

В Constans - Храним сам каталог товаров (catalog.js). И ключевые узлы (root.js) header, products, shopping - чтобы мы могли их потом отрендерить содержимое в html.

В Utils - в ней создаем утилиту для работы с локальным хранилищем.


Каждый компонент будет представлять собой class, который содержит методы и свойства.
Почему класс - потому что мы все компоненты подключаем в глобальную область видимости. У каждого компонента будут свои компоненты, которые не должны быть видны за пределами этого компонента. Поэтому такие переменные мы можем спрятать внутри класса, а работать будем непосредственно с экземпляром класса.


localStorage - это объект веб-хранилища, а еще свойство глобального объекта window, которые предназначено для сохранения данных по типу пара ключ/значение. Все что мы запишем в localStorage, останется там после перезагрузки страницы и даже после закрытия браузера. 
В данном проекте он хранит значение id того товара, который мы добавили в корзину по ключу products.

catalog.json заменятет нам удаленный файл components.js для того чтобы мы могли хранить данные в формате .json и работать с удаленным сервером (либо локальным, поэтому этот файлик в папке server).
Для этого так же создан файл index.js, который рендерит нашу страничку (нужный код метода render() мы переместила в этот файлик  header и products)

И так же написали код для формирования AJAX-запроса (fetch, then, catch)